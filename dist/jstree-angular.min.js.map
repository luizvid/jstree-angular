{"version":3,"sources":["jstree-angular-factory.js","jstree-angular-directive.js"],"names":["jsTree","angular","module","app","factory","$log","$rootScope","this","moved_nodes","selected_node","undefined","cbRefreshTree","cbUndoMove","setMovedNodes","node","_alreadyMoved","id","_updateMove","_newMove","$broadcast","index","parent","old_parent","splice","data","position","push","getMovedNodes","cleanMovedNodes","undoLastMove","unshift","setSelectedNode","getSelectedNode","clearSelectedNode","refreshTree","_refreshTree","cb","undoMove","_undoMove","needle","length","i","directive","$timeout","jsTreeService","link","scope","element","plugins","split","options","properties","key","indexOf","hasOwnProperty","console","log","jstree","$watch","treeData","settings","core","on","e","target","parentNode","to","value","isUndefined","cancel","search","refresh","restrict","model"],"mappings":"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","file":"jstree-angular.min.js","sourcesContent":["/*!\r\n jsTree-Angular\r\n (c) 2015 Luiz Fernando Vid <luizvid@gmail.com>\r\n License: MIT\r\n Version 1.1\r\n */\r\nvar jsTree = angular.module('jsTreeAngular',[]);\r\n\r\n(function(app) {\r\n    app.factory('jsTreeService', [\r\n            '$log', '$rootScope',\r\n            function($log, $rootScope) {\r\n                'use strict';\r\n\r\n                this.moved_nodes = [];\r\n                this.selected_node = undefined;\r\n                this.cbRefreshTree = function() {};\r\n                this.cbUndoMove = function() {};\r\n\r\n                this.setMovedNodes = function(node) {\r\n                    if (this._alreadyMoved(node.node.id) !== false) {\r\n                        this._updateMove(node);\r\n                    } else {\r\n                        this._newMove(node);\r\n                    }\r\n\r\n                    $rootScope.$broadcast('jsTreeService:moved', this.moved_nodes);\r\n                };\r\n\r\n                this._updateMove = function(node) {\r\n                    var index = this._alreadyMoved(node.node.id);\r\n\r\n                    if (node.parent == this.moved_nodes[index].old_parent) {\r\n                        this.moved_nodes.splice(index, 1);\r\n                        return;\r\n                    }\r\n\r\n                    var data = {\r\n                        'id': node.node.id,\r\n                        'parent': node.parent,\r\n                        'old_parent': this.moved_nodes[index].old_parent,\r\n                        'position': node.position\r\n                    };\r\n\r\n                    this.moved_nodes[index] = data;\r\n                };\r\n\r\n                this._newMove = function(node) {\r\n                    var data = {\r\n                        'id': node.node.id,\r\n                        'parent': node.parent,\r\n                        'old_parent': node.old_parent,\r\n                        'position': node.position\r\n                    };\r\n\r\n                    this.moved_nodes.push(data);\r\n                };\r\n\r\n                this.getMovedNodes = function() {\r\n                    return this.moved_nodes;\r\n                };\r\n\r\n                this.cleanMovedNodes = function() {\r\n                    this.moved_nodes = [];\r\n                };\r\n\r\n                this.undoLastMove = function() {\r\n                    this.moved_nodes.unshift();\r\n                };\r\n\r\n                this.setSelectedNode = function(node) {\r\n                    this.selected_node = node;\r\n                    $rootScope.$broadcast('jsTreeService:selected', this.selected_node);\r\n                };\r\n\r\n                this.getSelectedNode = function(node) {\r\n                    return this.selected_node = node;\r\n                };\r\n\r\n                this.clearSelectedNode = function() {\r\n                    this.selected_node = undefined;\r\n                };\r\n\r\n                this.refreshTree = function() {\r\n                    this.clearSelectedNode();\r\n                    this.cleanMovedNodes();\r\n                    this.cbRefreshTree();\r\n                };\r\n\r\n                this._refreshTree = function(cb) {\r\n                    this.cbRefreshTree = cb;\r\n                };\r\n\r\n                this.undoMove = function() {\r\n                    this.undoLastMove();\r\n                    this.cbUndoMove();\r\n                };\r\n\r\n                this._undoMove = function(cb) {\r\n                    this.cbUndoMove = cb;\r\n                };\r\n\r\n                this._alreadyMoved = function(needle) {\r\n                    var length = this.moved_nodes.length;\r\n                    for(var i = 0; i < length; i++) {\r\n                        if(this.moved_nodes[i].id == needle) return i;\r\n                    }\r\n                    return false;\r\n                };\r\n\r\n                return this;\r\n            }\r\n    ]);\r\n})(jsTree);","/*\r\n jsTree-Angular\r\n (c) 2015 Luiz Fernando Vid <luizvid@gmail.com>\r\n License: MIT\r\n Version 1.1\r\n */\r\n(function(app) {\r\n    app.directive('jsTree', [\r\n        '$timeout', 'jsTreeService',\r\n        function ($timeout, jsTreeService) {\r\n            'use strict';\r\n\r\n            var key, plugins = [], options = [], properties = {};\r\n\r\n            function link(scope, element) {\r\n                plugins = scope.plugins ? scope.plugins.split(',') : [];\r\n                options = scope.options ? scope.options : [];\r\n\r\n                properties = {'plugins': plugins};\r\n\r\n                if (scope.options !== undefined) {\r\n                    for (key in options) {\r\n                        if ('core' === key || plugins.indexOf(key))\r\n                            if (options.hasOwnProperty(key))\r\n                                properties[key] = options[key];\r\n                    }\r\n                }\r\n\r\n                console.log(properties);\r\n                element.jstree(properties);\r\n\r\n                scope.$watch('model', function (treeData) {\r\n                    if (treeData == null) return;\r\n\r\n                    element.jstree(true).settings.core.data = treeData;\r\n                    jsTreeService.refreshTree();\r\n\r\n                }, true);\r\n\r\n                element.on('move_node.jstree', function (e, data) {\r\n                    if (data.parent != data.old_parent) {\r\n                        jsTreeService.setMovedNodes(data);\r\n                    }\r\n                });\r\n\r\n                element.on('dblclick.jstree', function (e) {\r\n                    if (e.target.parentNode.id) {\r\n                        var data = {\r\n                            'id': e.target.parentNode.id,\r\n                            'parent': e.target.parentNode.parentNode.parentNode.id\r\n                        };\r\n                        jsTreeService.setSelectedNode(data);\r\n                    }\r\n                });\r\n\r\n                var to = false;\r\n                scope.$watch('search', function (value) {\r\n                    if (angular.isUndefined(value)) return;\r\n\r\n                    if (to) {\r\n                        $timeout.cancel(to);\r\n                    }\r\n                    to = $timeout(function () {\r\n                        element.jstree(true).search(value);\r\n                    }, 250);\r\n                });\r\n\r\n                function _isDraggable(node) {\r\n                    return (!(\r\n                    node[0].type == 'disabled' ||\r\n                    node[0].type == 'root'\r\n                    ));\r\n                }\r\n\r\n                jsTreeService._refreshTree(function () {\r\n                    element.jstree(true).refresh(false, true);\r\n                });\r\n\r\n                jsTreeService._undoMove(function () {\r\n                    //element.jstree(true).undo();\r\n                });\r\n\r\n            }\r\n\r\n\r\n            return {\r\n                restrict: 'EA',\r\n                scope: {\r\n                    model: '=treeModel',\r\n                    search: '=treeSearch',\r\n                    plugins: '@treePlugins',\r\n                    options: '=treeOptions'\r\n                },\r\n                link: link\r\n            };\r\n        }\r\n    ]);\r\n})(jsTree);"],"sourceRoot":"/source/"}