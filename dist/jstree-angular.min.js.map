{"version":3,"sources":["jstree-angular-factory.js","jstree-angular-directive.js"],"names":["angular","isUndefined","jsTreeAngular","module","app","factory","$rootScope","this","moved_nodes","selected_node","undefined","available_plugins","_cbRefreshTree","setMovedNodes","node","_checksActivePlugins","_alreadyMoved","id","_updateMove","_newMove","$broadcast","getMovedNodes","cleanMovedNodes","undoLastMove","unshift","setSelectedNode","getSelectedNode","clearSelectedNode","refreshTree","_refreshTree","cb","_this","index","parent","old_parent","splice","data","position","fnCalled","fnPlugin","push","needle","length","i","directive","$timeout","link","scope","element","_plugins","plugins","_mapTrim","split","_options","options","_properties","key","indexOf","hasOwnProperty","jstree","$watch","treeData","settings","core","to","value","cancel","search","on","e","event","target","parentNode","refresh","arr","$","trim","restrict","model"],"mappings":"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","file":"jstree-angular.min.js","sourcesContent":["/*!\r\n jsTree-Angular\r\n (c) 2015 Luiz Fernando Vid <luizvid@gmail.com>\r\n License: MIT\r\n Version 1.1\r\n */\r\nif(angular.isUndefined(jsTreeAngular)) {\r\n    var jsTreeAngular = angular.module('jsTreeAngular',[]);\r\n}\r\n(function(app) {\r\n    app.factory('jsTreeAngular', [\r\n        '$rootScope',\r\n        function($rootScope) {\r\n            'use strict';\r\n\r\n            /**\r\n             * dnd`s (drag and drop) plugin function, plugin needed\r\n             * Holds the list of moved arrays\r\n             * @type {Array}\r\n             */\r\n            this.moved_nodes = [];\r\n\r\n            /**\r\n             * no plugin needed\r\n             * Holds the selected node\r\n             * @type {undefined}\r\n             */\r\n            this.selected_node = undefined;\r\n\r\n            /**\r\n             * Holds the active plugins\r\n             * @type {undefined}\r\n             */\r\n            this.available_plugins = undefined;\r\n\r\n            /**\r\n             * Holds the refresh`s tree method\r\n             * @private\r\n             */\r\n            var _cbRefreshTree = function() {};\r\n\r\n            /**\r\n             * dnd`s (drag and drop) Plugin function, plugin needed\r\n             * Sets the moved nodes\r\n             * @param node\r\n             */\r\n            this.setMovedNodes = function(node) {\r\n                _checksActivePlugins('setMovedNodes', 'dnd');\r\n                if (_alreadyMoved(node.node.id, this) !== false) {\r\n                    _updateMove(node, this);\r\n                } else {\r\n                    _newMove(node, this);\r\n                }\r\n\r\n                $rootScope.$broadcast('jsTreeAngular:moved', this.moved_nodes);\r\n            };\r\n\r\n            /**\r\n             * dnd`s (drag and drop) Plugin function, plugin needed\r\n             *\r\n             * @returns {Array}\r\n             */\r\n            this.getMovedNodes = function() {\r\n                return this.moved_nodes;\r\n            };\r\n\r\n            /**\r\n             * Clears the moved nodes holder.\r\n             */\r\n            this.cleanMovedNodes = function() {\r\n                this.moved_nodes = [];\r\n            };\r\n\r\n            this.undoLastMove = function() {\r\n                this.moved_nodes.unshift();\r\n            };\r\n\r\n            this.setSelectedNode = function(node) {\r\n                this.selected_node = node;\r\n                $rootScope.$broadcast('jsTreeAngular:selected', this.selected_node);\r\n            };\r\n\r\n            /**\r\n             * Returns the selected node value.\r\n             * @param node\r\n             * @returns {*}\r\n             */\r\n            this.getSelectedNode = function(node) {\r\n                return this.selected_node = node;\r\n            };\r\n\r\n            /**\r\n             * Clears the selected node holder.\r\n             */\r\n            this.clearSelectedNode = function() {\r\n                this.selected_node = undefined;\r\n            };\r\n\r\n            /**\r\n             * Triggers the refresh`s tree method and clean all variables.\r\n             */\r\n            this.refreshTree = function() {\r\n                this.clearSelectedNode();\r\n                this.cleanMovedNodes();\r\n                _cbRefreshTree();\r\n            };\r\n\r\n            /**\r\n             * Attach refresh`s tree method\r\n             * @param cb\r\n             * @private\r\n             */\r\n            this._refreshTree = function(cb) {\r\n                _cbRefreshTree = cb;\r\n            };\r\n\r\n            /**\r\n             * Private function _updateMove\r\n             * @param node\r\n             * @param _this\r\n             * @private\r\n             */\r\n            var _updateMove = function(node, _this) {\r\n                var index = _alreadyMoved(node.node.id, _this);\r\n\r\n                if (node.parent == _this.moved_nodes[index].old_parent) {\r\n                    _this.moved_nodes.splice(index, 1);\r\n                    return;\r\n                }\r\n\r\n                var data = {\r\n                    'id': node.node.id,\r\n                    'parent': node.parent,\r\n                    'old_parent': _this.moved_nodes[index].old_parent,\r\n                    'position': node.position\r\n                };\r\n\r\n                _this.moved_nodes[index] = data;\r\n            };\r\n\r\n            /**\r\n             * Checks if the plugin is active.\r\n             * @param fnCalled\r\n             * @private\r\n             */\r\n            var _checksActivePlugins = function(fnCalled, fnPlugin) {\r\n                if (false) {\r\n                    console.error('The method ' + fnCalled + ' is not set because the ' + fnPlugin + '`s plugin is not active.');\r\n                    return false;\r\n                }\r\n            };\r\n\r\n            /**\r\n             * Private function _newMove\r\n             * @param node\r\n             * @param _this\r\n             * @private\r\n             */\r\n            var _newMove = function(node, _this) {\r\n                var data = {\r\n                    'id': node.node.id,\r\n                    'parent': node.parent,\r\n                    'old_parent': node.old_parent,\r\n                    'position': node.position\r\n                };\r\n\r\n                _this.moved_nodes.push(data);\r\n            };\r\n\r\n            /**\r\n             * Private function _alreadyMoved\r\n             * @param needle\r\n             * @param _this\r\n             * @private\r\n             */\r\n            var _alreadyMoved = function(needle, _this) {\r\n                var length = _this.moved_nodes.length;\r\n                for(var i = 0; i < length; i++) {\r\n                    if(_this.moved_nodes[i].id == needle) return i;\r\n                }\r\n                return false;\r\n            };\r\n\r\n            /**\r\n             * Returns an instance of this factory\r\n             */\r\n            return this;\r\n        }\r\n    ]);\r\n})(jsTreeAngular);","/*\r\n jsTree-Angular\r\n (c) 2015 Luiz Fernando Vid <luizvid@gmail.com>\r\n License: MIT\r\n Version 1.1\r\n */\r\nif(angular.isUndefined(jsTreeAngular)) {\r\n    var jsTreeAngular = angular.module('jsTreeAngular',[]);\r\n}\r\n(function(app) {\r\n    app.directive('jsTree', [\r\n        '$timeout', 'jsTreeAngular',\r\n        function ($timeout, jsTreeAngular) {\r\n            'use strict';\r\n\r\n            /**\r\n             * Initializes properties.\r\n             * @type {Array}\r\n             * @private\r\n             */\r\n            var _plugins = [], _options = [], _properties = {};\r\n\r\n            function link(scope, element) {\r\n                /**\r\n                 * Sets plugin list from scope`s tree-plugin.\r\n                 * @type {*}\r\n                 * @private\r\n                 */\r\n                _plugins = scope.plugins ? _mapTrim(scope.plugins.split(',')) : [];\r\n                /**\r\n                 * Sets option list from scope`s tree-options.\r\n                 * @private\r\n                 */\r\n                _options = scope.options ? scope.options : [];\r\n                /**\r\n                 * Sets properties\r\n                 * @type {{plugins: Array}}\r\n                 * @private\r\n                 */\r\n                _properties = {'plugins': _plugins};\r\n\r\n                /**\r\n                 * Set pair for plugins and options and validate them.\r\n                 */\r\n                if (scope.options !== undefined) {\r\n                    for (var key in _options) {\r\n                        if ('core' === key || _plugins.indexOf(key))\r\n                            if (_options.hasOwnProperty(key))\r\n                                _properties[key] = _options[key];\r\n                    }\r\n                }\r\n\r\n                element.jstree(_properties);\r\n\r\n                /**\r\n                 * Watch for scope`s tree-model callback.\r\n                 */\r\n                scope.$watch('model', function (treeData) {\r\n                    if (treeData == null) return;\r\n\r\n                    element.jstree(true).settings.core.data = treeData;\r\n\r\n                    jsTreeAngular.refreshTree();\r\n                }, true);\r\n\r\n\r\n                /**\r\n                 * Watch for tree-search scope`s callback.\r\n                 * @type {boolean}\r\n                 */\r\n                var to = false;\r\n                scope.$watch('search', function (value) {\r\n                    _checksActivePlugins('search');\r\n                    if (angular.isUndefined(value) || plugins.indexOf('search') == -1) return;\r\n\r\n                    if (to) {\r\n                        $timeout.cancel(to);\r\n                    }\r\n                    to = $timeout(function () {\r\n                        element.jstree(true).search(value);\r\n                    }, 250);\r\n                });\r\n\r\n                /**\r\n                 * Sets jsTreeAngular`s moved nodes when tree`s event for move node is triggered.\r\n                 */\r\n                element.on('move_node.jstree', function (e, data) {\r\n                    if (data.parent != data.old_parent) {\r\n                        jsTreeAngular.setMovedNodes(data);\r\n                    }\r\n                });\r\n\r\n                /**\r\n                 * Sets jsTreeAngular`s selected node when tree`s event for double click is triggered.\r\n                 */\r\n                element.on('dblclick.jstree', function (event, data) {\r\n                    if (event.target.parentNode.id) {\r\n                        var data = {\r\n                            'id': event.target.parentNode.id,\r\n                            'parent': event.target.parentNode.parentNode.parentNode.id\r\n                        };\r\n                        jsTreeAngular.setSelectedNode(data);\r\n                    }\r\n                });\r\n\r\n                /**\r\n                 * Sets the refresh`s tree method to JsTreeAngular`s callback\r\n                 */\r\n                jsTreeAngular._refreshTree(function () {\r\n                    element.jstree(true).refresh(false, true);\r\n                });\r\n\r\n                /**\r\n                 * Checks if the plugin is active.\r\n                 * @param fnPlugin\r\n                 * @private\r\n                 */\r\n                var _checksActivePlugins = function(fnPlugin) {\r\n                    if (false) {\r\n                        console.error('The ' + fnPlugin + ' is needed for this functionality.');\r\n                    }\r\n                };\r\n            }\r\n\r\n            /**\r\n             * Array`s trim\r\n             * @param arr\r\n             * @returns {*}\r\n             * @private\r\n             */\r\n            var _mapTrim = function(arr) {\r\n                for (var key in arr) {\r\n                    arr[key] = $.trim(arr[key]);\r\n                }\r\n                return arr;\r\n            };\r\n\r\n            /**\r\n             * Directive scope`s callback\r\n             */\r\n            return {\r\n                restrict: 'EA',\r\n                scope: {\r\n                    model: '=treeModel',\r\n                    search: '=treeSearch',\r\n                    plugins: '@treePlugins',\r\n                    options: '=treeOptions'\r\n                },\r\n                link: link\r\n            };\r\n        }\r\n    ]);\r\n})(jsTreeAngular);"],"sourceRoot":"/source/"}