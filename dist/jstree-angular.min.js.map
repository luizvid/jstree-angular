{"version":3,"sources":["jstree-angular-factory.js","jstree-angular-directive.js"],"names":["angular","isUndefined","jsTreeAngular","module","app","factory","$rootScope","_moved_nodes","_selected_node","undefined","_available_plugins","_cbRefreshTree","this","setMovedNodes","node","_alreadyMoved","id","_updateMove","_newMove","$broadcast","getMovedNodes","_checksActivePlugins","cleanMovedNodes","undoLastMove","unshift","setSelectedNode","getSelectedNode","clearSelectedNode","_setActivePlugins","plugins","refreshTree","_refreshTree","cb","index","parent","old_parent","splice","data","position","fnPlugin","fnCalled","indexOf","console","error","push","needle","length","i","directive","$timeout","link","scope","element","jstree","append","Error","_id","_mapTrim","_plugins","split","_options","options","_properties","key","hasOwnProperty","settings","massload","$watch","treeData","core","to","value","cancel","search","on","e","event","target","parentNode","refresh","$","trim","restrict","model"],"mappings":"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","file":"jstree-angular.min.js","sourcesContent":["/*!\r\n jsTree-Angular\r\n (c) 2015 Luiz Fernando Vid <luizvid@gmail.com>\r\n License: MIT\r\n Version 1.1.1\r\n */\r\nif(angular.isUndefined(jsTreeAngular)) {\r\n    var jsTreeAngular = angular.module('jsTreeAngular',[]);\r\n}\r\n(function(app) {\r\n    app.factory('jsTreeAngular', [\r\n        '$rootScope',\r\n        function($rootScope) {\r\n            'use strict';\r\n\r\n            /**\r\n             * dnd`s (drag and drop) plugin function, plugin needed\r\n             * Holds the list of moved arrays\r\n             * @type {Array}\r\n             * @private\r\n             */\r\n            var _moved_nodes = [];\r\n\r\n            /**\r\n             * no plugin needed\r\n             * Holds the selected node\r\n             * @type {undefined}\r\n             * @private\r\n             */\r\n            var _selected_node = undefined;\r\n\r\n            /**\r\n             * Holds the active plugins\r\n             * @type {undefined}\r\n             * @private\r\n             */\r\n            var _available_plugins = undefined;\r\n\r\n            /**\r\n             * Holds the refresh`s tree method\r\n             * @private\r\n             */\r\n            var _cbRefreshTree = function() {};\r\n\r\n            /**\r\n             * dnd`s (drag and drop) Plugin function, plugin needed\r\n             * Sets the moved nodes\r\n             * @param node\r\n             */\r\n            this.setMovedNodes = function(node) {\r\n                if (_alreadyMoved(node.node.id, this) !== false) {\r\n                    _updateMove(node);\r\n                } else {\r\n                    _newMove(node);\r\n                }\r\n\r\n                $rootScope.$broadcast('jsTreeAngular:moved', _moved_nodes);\r\n            };\r\n\r\n            /**\r\n             * dnd`s (drag and drop) Plugin function, plugin needed\r\n             *\r\n             * @returns {Array}\r\n             */\r\n            this.getMovedNodes = function() {\r\n                if (_checksActivePlugins('dnd', 'getMovedNodes')) return;\r\n                return _moved_nodes;\r\n            };\r\n\r\n            /**\r\n             * Clears the moved nodes holder.\r\n             */\r\n            this.cleanMovedNodes = function() {\r\n                if (_checksActivePlugins('dnd', 'cleanMovedNodes')) return;\r\n                _moved_nodes = [];\r\n            };\r\n\r\n            this.undoLastMove = function() {\r\n                if (_checksActivePlugins('dnd', 'undoLastMove')) return;\r\n                _moved_nodes.unshift();\r\n            };\r\n\r\n            this.setSelectedNode = function(node) {\r\n                _selected_node = node;\r\n                $rootScope.$broadcast('jsTreeAngular:selected', _selected_node);\r\n            };\r\n\r\n            /**\r\n             * Returns the selected node value.\r\n             * @param node\r\n             * @returns {*}\r\n             */\r\n            this.getSelectedNode = function(node) {\r\n                return _selected_node = node;\r\n            };\r\n\r\n            /**\r\n             * Clears the selected node holder.\r\n             */\r\n            this.clearSelectedNode = function() {\r\n                _selected_node = undefined;\r\n            };\r\n\r\n            /**\r\n             * Sets the active plugins.\r\n             * @param plugins\r\n             * @private\r\n             */\r\n            this._setActivePlugins = function(plugins) {\r\n                _available_plugins = plugins;\r\n            };\r\n\r\n            /**\r\n             * Triggers the refresh`s tree method and clean all variables.\r\n             */\r\n            this.refreshTree = function() {\r\n                this.clearSelectedNode();\r\n                this.cleanMovedNodes();\r\n                _cbRefreshTree();\r\n            };\r\n\r\n            /**\r\n             * Attach refresh`s tree method\r\n             * @param cb\r\n             * @private\r\n             */\r\n            this._refreshTree = function(cb) {\r\n                _cbRefreshTree = cb;\r\n            };\r\n\r\n            /**\r\n             * Private function _updateMove\r\n             * @param node\r\n             * @param _this\r\n             * @private\r\n             */\r\n            var _updateMove = function(node) {\r\n                var index = _alreadyMoved(node.node.id);\r\n\r\n                if (node.parent == _moved_nodes[index].old_parent) {\r\n                    _moved_nodes.splice(index, 1);\r\n                    return;\r\n                }\r\n\r\n                var data = {\r\n                    'id': node.node.id,\r\n                    'parent': node.parent,\r\n                    'old_parent': _moved_nodes[index].old_parent,\r\n                    'position': node.position\r\n                };\r\n\r\n                _moved_nodes[index] = data;\r\n            };\r\n\r\n            /**\r\n             * Checks if the plugin is active.\r\n             * @param fnCalled\r\n             * @private\r\n             */\r\n            var _checksActivePlugins = function(fnPlugin, fnCalled) {\r\n                if (_available_plugins.indexOf(fnPlugin) === -1) {\r\n                    console.error(fnPlugin + ' plugin is needed for ' + fnCalled + ' to work. Add \\'' + fnPlugin + '\\' with tree-plugins.');\r\n                    return false;\r\n                }\r\n            };\r\n\r\n            /**\r\n             * Private function _newMove\r\n             * @param node\r\n             * @param _this\r\n             * @private\r\n             */\r\n            var _newMove = function(node) {\r\n                var data = {\r\n                    'id': node.node.id,\r\n                    'parent': node.parent,\r\n                    'old_parent': node.old_parent,\r\n                    'position': node.position\r\n                };\r\n\r\n                _moved_nodes.push(data);\r\n            };\r\n\r\n            /**\r\n             * Private function _alreadyMoved\r\n             * @param needle\r\n             * @param _this\r\n             * @private\r\n             */\r\n            var _alreadyMoved = function(needle) {\r\n                var length = _moved_nodes.length;\r\n                for(var i = 0; i < length; i++) {\r\n                    if(_moved_nodes[i].id == needle) return i;\r\n                }\r\n                return false;\r\n            };\r\n\r\n            /**\r\n             * Returns an instance of this factory\r\n             */\r\n            return this;\r\n        }\r\n    ]);\r\n})(jsTreeAngular);","/*\r\n jsTree-Angular\r\n (c) 2015 Luiz Fernando Vid <luizvid@gmail.com>\r\n License: MIT\r\n Version 1.1.1\r\n */\r\nif(angular.isUndefined(jsTreeAngular)) {\r\n    var jsTreeAngular = angular.module('jsTreeAngular',[]);\r\n}\r\n(function(app) {\r\n    app.directive('jsTree', [\r\n        '$timeout', 'jsTreeAngular',\r\n        function ($timeout, jsTreeAngular) {\r\n            'use strict';\r\n\r\n            /**\r\n             * Initializes properties.\r\n             * @type {Array}\r\n             * @private\r\n             */\r\n            var _plugins = [], _options = [], _properties = {}, _id;\r\n\r\n            function link(scope, element) {\r\n                /**\r\n                 * Verifies if jsTree is loaded.\r\n                 */\r\n                if (angular.isUndefined(element.jstree)) {\r\n                    element.append('<p style=\"color: red; font-size: 12px; background-color: rgba(255, 64, 39, 0.09)\">Something went wrong, <strong>jsTree looks like was not loaded. Obtain more information by clicking <a href=\"//github.com/luizvid/jstree-angular/blob/master/README.md#quick-start\" style=\"color: red; font-decoration: underline;\" target=\"_blank\">here</a>.</strong></p>');\r\n                    throw new Error('Something went wrong, jsTree looks like was not loaded.');\r\n                }\r\n\r\n                _id = scope.id ? _mapTrim(scope.id) : 'default-tree';\r\n                /**\r\n                 * Sets plugin list from scope`s tree-plugin.\r\n                 * @type {*}\r\n                 * @private\r\n                 */\r\n                _plugins = scope.plugins ? _mapTrim(scope.plugins.split(',')) : [];\r\n                /**\r\n                 * Sets option list from scope`s tree-options.\r\n                 * @private\r\n                 */\r\n                _options = scope.options ? scope.options : [];\r\n                /**\r\n                 * Sets properties\r\n                 * @type {{plugins: Array}}\r\n                 * @private\r\n                 */\r\n                _properties = {'plugins': _plugins};\r\n\r\n                /**\r\n                 * Set pair for plugins and options and validate them.\r\n                 */\r\n                if (scope.options !== undefined) {\r\n                    for (var key in _options) {\r\n                        if ('core' === key || _plugins.indexOf(key))\r\n                            if (_options.hasOwnProperty(key))\r\n                                _properties[key] = _options[key];\r\n                    }\r\n                }\r\n\r\n                /**\r\n                 * Initializes tree with plugins and options.\r\n                 */\r\n                element.jstree(_properties, 'test');\r\n\r\n                /**\r\n                 * Verifies if jsTree is updated with version 3.1.0 or later.\r\n                 */\r\n                if (angular.isUndefined(element.jstree(true).settings.massload)) {\r\n                    element.append('<p style=\"color: red; font-size: 12px; background-color: rgba(255, 64, 39, 0.09)\">Something went wrong, <strong>jsTree seems outdated. Update your version to 3.1.0 or later by clicking <a href=\"//github.com/vakata/jstree/releases\" style=\"color: red; font-decoration: underline;\" target=\"_blank\">here</a>.</strong></p>');\r\n                    return;\r\n                }\r\n                /**\r\n                 * Watch for scope`s tree-model callback.\r\n                 */\r\n                scope.$watch('model', function (treeData) {\r\n                    if (treeData == null) return;\r\n                    element.jstree(true).settings.core.data = treeData;\r\n                    jsTreeAngular.refreshTree();\r\n\r\n                }, true);\r\n\r\n                /**\r\n                 * Watch for tree-search scope`s callback.\r\n                 * @type {boolean}\r\n                 */\r\n                var to = false;\r\n                scope.$watch('search', function (value) {\r\n                    if (_checksActivePlugins('search', 'search')) return;\r\n                    if (angular.isUndefined(value) || _plugins.indexOf('search') == -1) return;\r\n\r\n                    if (to) {\r\n                        $timeout.cancel(to);\r\n                    }\r\n                    to = $timeout(function () {\r\n                        element.jstree(true).search(value);\r\n                    }, 250);\r\n                });\r\n\r\n                /**\r\n                 * Sets jsTreeAngular`s moved nodes when tree`s event for move node is triggered.\r\n                 */\r\n                element.on('move_node.jstree', function (e, data) {\r\n                    if (_checksActivePlugins('dnd', 'move_node')) return;\r\n                    if (data.parent != data.old_parent) {\r\n                        jsTreeAngular.setMovedNodes(data);\r\n                    }\r\n                });\r\n\r\n                /**\r\n                 * Sets jsTreeAngular`s selected node when tree`s event for double click is triggered.\r\n                 */\r\n                element.on('dblclick.jstree', function (event, data) {\r\n                    if (event.target.parentNode.id) {\r\n                        var data = {\r\n                            'id': event.target.parentNode.id,\r\n                            'parent': event.target.parentNode.parentNode.parentNode.id\r\n                        };\r\n                        jsTreeAngular.setSelectedNode(data);\r\n                    }\r\n                });\r\n\r\n                /**\r\n                 * Sets the refresh`s tree method to JsTreeAngular`s callback\r\n                 */\r\n                jsTreeAngular._refreshTree(function () {\r\n                    element.jstree(true).refresh(false, true);\r\n                });\r\n\r\n                /**\r\n                 * Checks if the plugin is active.\r\n                 * @param fnPlugin\r\n                 * @private\r\n                 */\r\n                var _checksActivePlugins = function(fnPlugin, fnCalled) {\r\n                    if (element.jstree(true).settings.plugins.indexOf(fnPlugin) === -1) {\r\n                        console.error(fnPlugin + ' plugin is needed for ' + fnCalled + ' to work. Add \\'' + fnPlugin + '\\' with tree-plugins.');\r\n                        return true;\r\n                    }\r\n                };\r\n\r\n                /**\r\n                 * Sets active plugins\r\n                 */\r\n                jsTreeAngular._setActivePlugins(element.jstree(true).settings.plugins);\r\n            }\r\n\r\n            /**\r\n             * Array`s trim\r\n             * @param arr\r\n             * @returns {*}\r\n             * @private\r\n             */\r\n            var _mapTrim = function(value) {\r\n                if (typeof value === 'string') {\r\n                    value = $.trim(value);\r\n                } else {\r\n                    for (var key in value) {\r\n                        value[key] = $.trim(value[key]);\r\n                    }\r\n                }\r\n                return value;\r\n            };\r\n\r\n            /**\r\n             * Directive scope`s callback\r\n             */\r\n            return {\r\n                restrict: 'EA',\r\n                scope: {\r\n                    id: '@treeId',\r\n                    model: '=treeModel',\r\n                    search: '=treeSearch',\r\n                    plugins: '@treePlugins',\r\n                    options: '=treeOptions'\r\n                },\r\n                link: link\r\n            };\r\n        }\r\n    ]);\r\n})(jsTreeAngular);"],"sourceRoot":"/source/"}