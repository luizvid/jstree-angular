{"version":3,"sources":["jstree-angular-factory.js","jstree-angular-directive.js"],"names":["jsTree","angular","module","app","factory","$rootScope","this","moved_nodes","selected_node","undefined","_cbRefreshTree","setMovedNodes","node","_alreadyMoved","id","_updateMove","_newMove","$broadcast","getMovedNodes","cleanMovedNodes","undoLastMove","unshift","setSelectedNode","getSelectedNode","clearSelectedNode","refreshTree","_refreshTree","cb","_this","index","parent","old_parent","splice","data","position","push","needle","length","i","directive","$timeout","jsTreeFactory","link","scope","element","plugins","_mapTrim","split","options","properties","key","indexOf","hasOwnProperty","jstree","$watch","treeData","settings","core","on","e","target","parentNode","to","value","isUndefined","cancel","search","refresh","arr","$","trim","restrict","model"],"mappings":";;;;;;AAMA,GAAAA,QAAAC,QAAAC,OAAA,qBAEA,SAAAC,GACAA,EAAAC,QAAA,iBACA,aACA,SAAAC,GACA,YAEAC,MAAAC,eACAD,KAAAE,cAAAC,MACA,IAAAC,GAAA,YAEAJ,MAAAK,cAAA,SAAAC,GACAC,EAAAD,EAAAA,KAAAE,GAAAR,SAAA,EACAS,EAAAH,EAAAN,MAEAU,EAAAJ,EAAAN,MAGAD,EAAAY,WAAA,sBAAAX,KAAAC,cAGAD,KAAAY,cAAA,WACA,MAAAZ,MAAAC,aAGAD,KAAAa,gBAAA,WACAb,KAAAC,gBAGAD,KAAAc,aAAA,WACAd,KAAAC,YAAAc,WAGAf,KAAAgB,gBAAA,SAAAV,GACAN,KAAAE,cAAAI,EACAP,EAAAY,WAAA,yBAAAX,KAAAE,gBAGAF,KAAAiB,gBAAA,SAAAX,GACA,MAAAN,MAAAE,cAAAI,GAGAN,KAAAkB,kBAAA,WACAlB,KAAAE,cAAAC,QAGAH,KAAAmB,YAAA,WACAnB,KAAAkB,oBACAlB,KAAAa,kBACAT,KAGAJ,KAAAoB,aAAA,SAAAC,GACAjB,EAAAiB,EASA,IAAAZ,GAAA,SAAAH,EAAAgB,GACA,GAAAC,GAAAhB,EAAAD,EAAAA,KAAAE,GAAAc,EAEA,IAAAhB,EAAAkB,QAAAF,EAAArB,YAAAsB,GAAAE,WAEA,WADAH,GAAArB,YAAAyB,OAAAH,EAAA,EAIA,IAAAI,IACAnB,GAAAF,EAAAA,KAAAE,GACAgB,OAAAlB,EAAAkB,OACAC,WAAAH,EAAArB,YAAAsB,GAAAE,WACAG,SAAAtB,EAAAsB,SAGAN,GAAArB,YAAAsB,GAAAI,GASAjB,EAAA,SAAAJ,EAAAgB,GACA,GAAAK,IACAnB,GAAAF,EAAAA,KAAAE,GACAgB,OAAAlB,EAAAkB,OACAC,WAAAnB,EAAAmB,WACAG,SAAAtB,EAAAsB,SAGAN,GAAArB,YAAA4B,KAAAF,IASApB,EAAA,SAAAuB,EAAAR,GAEA,IAAA,GADAS,GAAAT,EAAArB,YAAA8B,OACAC,EAAA,EAAAD,EAAAC,EAAAA,IACA,GAAAV,EAAArB,YAAA+B,GAAAxB,IAAAsB,EAAA,MAAAE,EAEA,QAAA,EAGA,OAAAhC,UAGAN,QCnHA,SAAAG,GACAA,EAAAoC,UAAA,UACA,WAAA,gBACA,SAAAC,EAAAC,GACA,YAIA,SAAAC,GAAAC,EAAAC,GAMA,GALAC,EAAAF,EAAAE,QAAAC,EAAAH,EAAAE,QAAAE,MAAA,SACAC,EAAAL,EAAAK,QAAAL,EAAAK,WAEAC,GAAAJ,QAAAA,GAEApC,SAAAkC,EAAAK,QACA,IAAAE,IAAAF,IACA,SAAAE,GAAAL,EAAAM,QAAAD,KACAF,EAAAI,eAAAF,KACAD,EAAAC,GAAAF,EAAAE,GAIAN,GAAAS,OAAAJ,GAEAN,EAAAW,OAAA,QAAA,SAAAC,GACA,MAAAA,IAEAX,EAAAS,QAAA,GAAAG,SAAAC,KAAAxB,KAAAsB,EACAd,EAAAhB,iBAEA,GAEAmB,EAAAc,GAAA,mBAAA,SAAAC,EAAA1B,GACAA,EAAAH,QAAAG,EAAAF,YACAU,EAAA9B,cAAAsB,KAIAW,EAAAc,GAAA,kBAAA,SAAAC,GACA,GAAAA,EAAAC,OAAAC,WAAA/C,GAAA,CACA,GAAAmB,IACAnB,GAAA6C,EAAAC,OAAAC,WAAA/C,GACAgB,OAAA6B,EAAAC,OAAAC,WAAAA,WAAAA,WAAA/C,GAEA2B,GAAAnB,gBAAAW,KAIA,IAAA6B,IAAA,CACAnB,GAAAW,OAAA,SAAA,SAAAS,GACA9D,QAAA+D,YAAAD,IAAA,IAAAlB,EAAAM,QAAA,YAEAW,GACAtB,EAAAyB,OAAAH,GAEAA,EAAAtB,EAAA,WACAI,EAAAS,QAAA,GAAAa,OAAAH,IACA,QAUAtB,EAAAf,aAAA,WACAkB,EAAAS,QAAA,GAAAc,SAAA,GAAA,KA9DA,GAAAjB,GAAAL,KAAAG,KAAAC,KAmEAH,EAAA,SAAAsB,GACA,IAAAlB,IAAAkB,GACAA,EAAAlB,GAAAmB,EAAAC,KAAAF,EAAAlB,GAEA,OAAAkB,GAGA,QACAG,SAAA,KACA5B,OACA6B,MAAA,aACAN,OAAA,cACArB,QAAA,eACAG,QAAA,gBAEAN,KAAAA,OAIA1C","file":"jstree-angular.min.js","sourcesContent":["/*!\r\n jsTree-Angular\r\n (c) 2015 Luiz Fernando Vid <luizvid@gmail.com>\r\n License: MIT\r\n Version 1.1\r\n */\r\nvar jsTree = angular.module('jsTreeAngular',[]);\r\n\r\n(function(app) {\r\n    app.factory('jsTreeFactory', [\r\n        '$rootScope',\r\n        function($rootScope) {\r\n            'use strict';\r\n\r\n            this.moved_nodes = [];\r\n            this.selected_node = undefined;\r\n            var _cbRefreshTree = function() {};\r\n\r\n            this.setMovedNodes = function(node) {\r\n                if (_alreadyMoved(node.node.id, this) !== false) {\r\n                    _updateMove(node, this);\r\n                } else {\r\n                    _newMove(node, this);\r\n                }\r\n\r\n                $rootScope.$broadcast('jsTreeService:moved', this.moved_nodes);\r\n            };\r\n\r\n            this.getMovedNodes = function() {\r\n                return this.moved_nodes;\r\n            };\r\n\r\n            this.cleanMovedNodes = function() {\r\n                this.moved_nodes = [];\r\n            };\r\n\r\n            this.undoLastMove = function() {\r\n                this.moved_nodes.unshift();\r\n            };\r\n\r\n            this.setSelectedNode = function(node) {\r\n                this.selected_node = node;\r\n                $rootScope.$broadcast('jsTreeService:selected', this.selected_node);\r\n            };\r\n\r\n            this.getSelectedNode = function(node) {\r\n                return this.selected_node = node;\r\n            };\r\n\r\n            this.clearSelectedNode = function() {\r\n                this.selected_node = undefined;\r\n            };\r\n\r\n            this.refreshTree = function() {\r\n                this.clearSelectedNode();\r\n                this.cleanMovedNodes();\r\n                _cbRefreshTree();\r\n            };\r\n\r\n            this._refreshTree = function(cb) {\r\n                _cbRefreshTree = cb;\r\n            };\r\n\r\n            /**\r\n             * Private function _updateMove\r\n             * @param node\r\n             * @param _this\r\n             * @private\r\n             */\r\n            var _updateMove = function(node, _this) {\r\n                var index = _alreadyMoved(node.node.id, _this);\r\n\r\n                if (node.parent == _this.moved_nodes[index].old_parent) {\r\n                    _this.moved_nodes.splice(index, 1);\r\n                    return;\r\n                }\r\n\r\n                var data = {\r\n                    'id': node.node.id,\r\n                    'parent': node.parent,\r\n                    'old_parent': _this.moved_nodes[index].old_parent,\r\n                    'position': node.position\r\n                };\r\n\r\n                _this.moved_nodes[index] = data;\r\n            };\r\n\r\n            /**\r\n             * Private function _newMove\r\n             * @param node\r\n             * @param _this\r\n             * @private\r\n             */\r\n            var _newMove = function(node, _this) {\r\n                var data = {\r\n                    'id': node.node.id,\r\n                    'parent': node.parent,\r\n                    'old_parent': node.old_parent,\r\n                    'position': node.position\r\n                };\r\n\r\n                _this.moved_nodes.push(data);\r\n            };\r\n\r\n            /**\r\n             * Private function _alreadyMoved\r\n             * @param needle\r\n             * @param _this\r\n             * @private\r\n             */\r\n            var _alreadyMoved = function(needle, _this) {\r\n                var length = _this.moved_nodes.length;\r\n                for(var i = 0; i < length; i++) {\r\n                    if(_this.moved_nodes[i].id == needle) return i;\r\n                }\r\n                return false;\r\n            };\r\n\r\n            return this;\r\n        }\r\n    ]);\r\n})(jsTree);","/*\r\n jsTree-Angular\r\n (c) 2015 Luiz Fernando Vid <luizvid@gmail.com>\r\n License: MIT\r\n Version 1.1\r\n */\r\n(function(app) {\r\n    app.directive('jsTree', [\r\n        '$timeout', 'jsTreeFactory',\r\n        function ($timeout, jsTreeFactory) {\r\n            'use strict';\r\n\r\n            var key, plugins = [], options = [], properties = {};\r\n\r\n            function link(scope, element) {\r\n                plugins = scope.plugins ? _mapTrim(scope.plugins.split(',')) : [];\r\n                options = scope.options ? scope.options : [];\r\n\r\n                properties = {'plugins': plugins};\r\n\r\n                if (scope.options !== undefined) {\r\n                    for (key in options) {\r\n                        if ('core' === key || plugins.indexOf(key))\r\n                            if (options.hasOwnProperty(key))\r\n                                properties[key] = options[key];\r\n                    }\r\n                }\r\n\r\n                element.jstree(properties);\r\n\r\n                scope.$watch('model', function (treeData) {\r\n                    if (treeData == null) return;\r\n\r\n                    element.jstree(true).settings.core.data = treeData;\r\n                    jsTreeFactory.refreshTree();\r\n\r\n                }, true);\r\n\r\n                element.on('move_node.jstree', function (e, data) {\r\n                    if (data.parent != data.old_parent) {\r\n                        jsTreeFactory.setMovedNodes(data);\r\n                    }\r\n                });\r\n\r\n                element.on('dblclick.jstree', function (e) {\r\n                    if (e.target.parentNode.id) {\r\n                        var data = {\r\n                            'id': e.target.parentNode.id,\r\n                            'parent': e.target.parentNode.parentNode.parentNode.id\r\n                        };\r\n                        jsTreeFactory.setSelectedNode(data);\r\n                    }\r\n                });\r\n\r\n                var to = false;\r\n                scope.$watch('search', function (value) {\r\n                    if (angular.isUndefined(value) || plugins.indexOf('search') == -1) return;\r\n\r\n                    if (to) {\r\n                        $timeout.cancel(to);\r\n                    }\r\n                    to = $timeout(function () {\r\n                        element.jstree(true).search(value);\r\n                    }, 250);\r\n                });\r\n\r\n                function _isDraggable(node) {\r\n                    return (!(\r\n                    node[0].type == 'disabled' ||\r\n                    node[0].type == 'root'\r\n                    ));\r\n                }\r\n\r\n                jsTreeFactory._refreshTree(function () {\r\n                    element.jstree(true).refresh(false, true);\r\n                });\r\n\r\n            }\r\n\r\n            var _mapTrim = function(arr) {\r\n                for (key in arr) {\r\n                    arr[key] = $.trim(arr[key]);\r\n                }\r\n                return arr;\r\n            };\r\n\r\n            return {\r\n                restrict: 'EA',\r\n                scope: {\r\n                    model: '=treeModel',\r\n                    search: '=treeSearch',\r\n                    plugins: '@treePlugins',\r\n                    options: '=treeOptions'\r\n                },\r\n                link: link\r\n            };\r\n        }\r\n    ]);\r\n})(jsTree);"],"sourceRoot":"/source/"}